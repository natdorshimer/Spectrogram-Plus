S+ Features TODO listSpectrogram Plus Resonance Processing Tools. Aka Spec+, S+, S++, etcI'm not a name designer okStage 1:* Implement some basic audio filters to test proof of concept of filtering STFTs	*Implement a general purpose linear frequency shifter	*Implement a low pass filters	*Implement a high pass filter* Make a gui for filters->Prototyping build for Stage 2/3   ETA ~1 week Stage 2:* Study more signal processing concepts, especially   in regards to selective frequency shifting * Study more voice mechanics to make sure I know exactly what different resonant  shifts do	* Make a general map relating resonant shifts with the accompanied sound	* Come up with different types of audio filters that would accompany those shifts* Design and implement the audio filters outlined->Alpha   ETA Free time dependent, est. 1 monthStage 3: * Perform testing on audio input and output	* Will need to collect audio samples / create audio samples for test cases 	* How will these tests be evaluated?		* Objective Test: Calculate if the filter works *as intended*			*Does it shift it where I wanted it to? Like does the calc work		* But even if filter works as intended, we have to most likely be purely 		  subjective about how it sounds, especially in regards to audio. The goal is		  produce specific sound shifts from the filtering.		* But we can be somewhat objective about that, especially by noting the		  changes across a wide variety of audio samples to determine if it achieves		  the desired output. * Diagnose issues, fix issues, iterate-> Beta Final Stage:* Refine GUI + reevaluate project needs-> Initial Version Release (1.0) General notes: Organize SpecPlusWindow.xaml.cs. It's getting out of hand* Consider parallelization of ISTFT and STFT if needed for real time calculation. Currently leaving real time calculation to Spectrogram so not necessary atm* I need a better way to organize the code... I can do the audio filters behind the scenes but I'm not really sure of a good way to make the GUI code look nicer, simpler, or more properly segmented atm. * Consider changing the name of FFTs to STFT. While the structure is technically a collection of FFTs and the data used to create the FFTs, hence, FFTs, it is much more accurately a Short Time Fourier Transform of a signal.* SpecAnalysis.STFT does require a bit of thorough testing. 