S+ Features TODO listSpectrogram Plus Resonance Processing Tools. Aka Spec+, S+, S++, etcI'm not a name designer okStage 1:* Implement basic frequency dependent frequency shifters	* See: NLFS brainstorming* Make the GUI for the frequency shifter windows-> Prototyping / Alpha build   ETA: 1 weekStage 2:* Study more signal processing concepts, especially    in regards to selective frequency shifting * Study more voice mechanics to make sure I know exactly what different resonant  shifts do	* Make a general map relating resonant shifts with the accompanied sound	* Come up with different types of audio filters that would accompany those 	shifts* Perform testing on audio input and output	* Will need to collect audio samples / create audio samples for test cases 	* How will these tests be evaluated?		* Objective Test: Calculate if the filter works *as intended*			* Does it shift it where I wanted it to? Like does the calc work		* But even if filter works as intended, we have to most likely be purely 		  subjective about how it sounds, especially in regards to audio. The		  goal is to produce specific sound shifts from the filtering.		* But we can be somewhat objective about that, especially by noting the		  changes across a wide variety of audio samples to determine if it		  achieves the desired output. * Diagnose issues, fix issues, iterate-> Beta    ETA free time dependentFinal Stage:* Refine GUI + reevaluate project needs* Think about how I want to incorporate the vocal technique -> resonant shift map	* Decide if worth implementing before 1.0 or save that for the next ver.-> Initial Version Release (1.0) General notes: * Consider parallelization of ISTFT and STFT if needed for real time calculation. Currently leaving real time calculation to Spectrogram so not necessary atm* Consider changing the name of FFTs to STFT. While the structure is technically a collection of FFTs and the data used to create the FFTs, hence, FFTs, it is much more accurately a Short Time Fourier Transform of a signal.* Consider deprecating Spectrogram.cs and moving to my custom FFTs class