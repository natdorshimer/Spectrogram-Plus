9.17.20Frequency shifting day! Specifically designing the frequency dependentfrequency shifting. This is a very niche area of DSP and it's hard to findspecific papers on this. I have an idea for how to go about it but itmight be a little bit messy to start.Say we have an FFT x[n] of size N, sample rate Fs. We want to design ashifter centered around center frequency bin c and shift it by amount S.We can design a window function, S[n] with amplitude S centered at x[c]and tapering off. We then shift that frequency by amount S[n] and add itinto an output FFT y[n]. y[i+s[i]] += x[i]. Optionally, we can also introduce a scaling map A[n] that maps a scalingvalue to shifted frequencies. Our algorithm would essentially bes[k] # The window function telling how far each frequency should shifty[k] = new Complex[N]; # Placeholder for holding our new FFT dataSTFT[n][k] # The short time fourier representation of our datafor n = 0; n < N; n++:	x = STFT[n] #FFT at time n 	for k = 0; k < N; k += 1:		# Add x[k]*a[k] into position k+s[k] of y ontop of values there		y[k+s[k]] += x[k]*a[k]	for k = 0; k < N; k += 1:		#Copy the values back into the original FFT		x[k] = y[k] 	The trick, then, would be to design a window function s[n] that would havethe absolute minimum amount of overlap when frequency shifting. Ideally nooverlap in frequency bands. A high sample rate and FFT size will allowenough room for frequencies to move around, but since the end goal isshifting the ratios of each resonant frequency, we moreso need to worryabout the difference from one resonant frequency band to the next. Havingoverlaps there would cause problems / not produce the desired outcome. Wewant to change the distance ratio of the bands, but also prevent them frommoving into each other. Instead of manually selecting S[n], it may be smarter to programaticallycompute an S[n] to use for shifting kinda like linear predictive coding.I suppose some apt goals for today are:* Do some research and find ANYTHING about nonlinear frequency shifting.  Textbooks don't really talk about this and it's hard to find on google  alone but someone's gotta have something on this. I really hope my  @psu.edu still lets me view academic papers for free.* Maybe read up on linear predictive coding* Think about ways to progamatically create S[n] and (maybe) a[n]* Implement some basic ideas like the algorithm listed above, even if the  window function is hand-curated instead of progammed